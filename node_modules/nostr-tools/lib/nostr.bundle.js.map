{
  "version": 3,
  "sources": ["../node_modules/@scure/bip39/wordlists/english.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/_assert.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/cryptoBrowser.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/utils.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/hmac.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/pbkdf2.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/_sha2.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/sha256.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/_u64.js", "../node_modules/@scure/bip39/node_modules/@noble/hashes/sha512.js", "../node_modules/@scure/base/lib/index.js", "../node_modules/@scure/bip39/index.js", "../index.ts", "../keys.ts", "../node_modules/@noble/secp256k1/lib/esm/index.js", "../relay.ts", "../event.ts", "../node_modules/@noble/hashes/esm/sha256.js", "../node_modules/@noble/hashes/esm/_sha2.js", "../node_modules/@noble/hashes/esm/utils.js", "../node_modules/@noble/hashes/esm/cryptoBrowser.js", "../utils.ts", "../filter.ts", "../fakejson.ts", "../nip04.ts", "../node_modules/@scure/base/lib/esm/index.js", "../nip05.ts", "../nip06.ts", "../node_modules/@scure/bip32/lib/esm/index.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/hmac.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/_assert.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/utils.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/cryptoBrowser.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/ripemd160.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/_sha2.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/sha256.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/sha512.js", "../node_modules/@scure/bip32/node_modules/@noble/hashes/esm/_u64.js", "../nip19.ts", "../nip26.ts", "../node_modules/@noble/hashes/esm/hmac.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordlist = void 0;\nexports.wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    _assert_js_1.default.hash(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    _assert_js_1.default.number(c);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + \u22EF + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc\u22121)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + \u22EF + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc\u22121)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n", "\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst base_1 = require(\"@scure/base\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    _assert_1.default.bytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    _assert_1.default.number(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha256_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2 ** 11 || typeof wordlist[0] !== 'string')\n        throw new Error('Worlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n", "export * from './keys'\nexport * from './relay'\nexport * from './event'\nexport * from './filter'\n\nexport * as nip04 from './nip04'\nexport * as nip05 from './nip05'\nexport * as nip06 from './nip06'\nexport * as nip19 from './nip19'\nexport * as nip26 from './nip26'\n\nexport * as fj from './fakejson'\nexport * as utils from './utils'\n\n// monkey patch secp256k1\nimport * as secp256k1 from '@noble/secp256k1'\nimport {hmac} from '@noble/hashes/hmac'\nimport {sha256} from '@noble/hashes/sha256'\nsecp256k1.utils.hmacSha256Sync = (key, ...msgs) =>\n  hmac(sha256, key, secp256k1.utils.concatBytes(...msgs))\nsecp256k1.utils.sha256Sync = (...msgs) =>\n  sha256(secp256k1.utils.concatBytes(...msgs))\n", "import * as secp256k1 from '@noble/secp256k1'\n\nexport function generatePrivateKey(): string {\n  return secp256k1.utils.bytesToHex(secp256k1.utils.randomPrivateKey())\n}\n\nexport function getPublicKey(privateKey: string): string {\n  return secp256k1.utils.bytesToHex(secp256k1.schnorr.getPublicKey(privateKey))\n}\n", "/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n", "/* global WebSocket */\n\nimport {Event, verifySignature, validateEvent} from './event'\nimport {Filter, matchFilters} from './filter'\nimport {getHex64} from './fakejson'\n\ntype RelayEvent = 'connect' | 'disconnect' | 'error' | 'notice'\n\nexport type Relay = {\n  url: string\n  status: number\n  connect: () => Promise<void>\n  close: () => Promise<void>\n  sub: (filters: Filter[], opts?: SubscriptionOptions) => Sub\n  publish: (event: Event) => Pub\n  on: (type: RelayEvent, cb: any) => void\n  off: (type: RelayEvent, cb: any) => void\n}\nexport type Pub = {\n  on: (type: 'ok' | 'seen' | 'failed', cb: any) => void\n  off: (type: 'ok' | 'seen' | 'failed', cb: any) => void\n}\nexport type Sub = {\n  sub: (filters: Filter[], opts: SubscriptionOptions) => Sub\n  unsub: () => void\n  on: (type: 'event' | 'eose', cb: any) => void\n  off: (type: 'event' | 'eose', cb: any) => void\n}\n\ntype SubscriptionOptions = {\n  skipVerification?: boolean\n  id?: string\n}\n\nexport function relayInit(\n  url: string,\n  alreadyHaveEvent: (id: string) => boolean = () => false\n): Relay {\n  var ws: WebSocket\n  var resolveClose: () => void\n  var setOpen: (value: PromiseLike<void> | void) => void\n  var untilOpen = new Promise<void>(resolve => {\n    setOpen = resolve\n  })\n  var openSubs: {[id: string]: {filters: Filter[]} & SubscriptionOptions} = {}\n  var listeners: {\n    connect: Array<() => void>\n    disconnect: Array<() => void>\n    error: Array<() => void>\n    notice: Array<(msg: string) => void>\n  } = {\n    connect: [],\n    disconnect: [],\n    error: [],\n    notice: []\n  }\n  var subListeners: {\n    [subid: string]: {\n      event: Array<(event: Event) => void>\n      eose: Array<() => void>\n    }\n  } = {}\n  var pubListeners: {\n    [eventid: string]: {\n      ok: Array<() => void>\n      seen: Array<() => void>\n      failed: Array<(reason: string) => void>\n    }\n  } = {}\n\n  async function connectRelay(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      ws = new WebSocket(url)\n\n      ws.onopen = () => {\n        listeners.connect.forEach(cb => cb())\n        setOpen()\n        resolve()\n      }\n      ws.onerror = () => {\n        listeners.error.forEach(cb => cb())\n        reject()\n      }\n      ws.onclose = async () => {\n        listeners.disconnect.forEach(cb => cb())\n        resolveClose && resolveClose()\n      }\n\n      let incomingMessageQueue: string[] = []\n      let handleNextInterval: any\n\n      ws.onmessage = e => {\n        incomingMessageQueue.push(e.data)\n        if (!handleNextInterval) {\n          handleNextInterval = setInterval(handleNext, 0)\n        }\n      }\n\n      function handleNext() {\n        if (incomingMessageQueue.length === 0) {\n          clearInterval(handleNextInterval)\n          handleNextInterval = null\n          return\n        }\n\n        var json = incomingMessageQueue.shift()\n        if (!json || alreadyHaveEvent(getHex64(json, 'id'))) {\n          return\n        }\n\n        try {\n          let data = JSON.parse(json)\n\n          // we won't do any checks against the data since all failures (i.e. invalid messages from relays)\n          // will naturally be caught by the encompassing try..catch block\n\n          switch (data[0]) {\n            case 'EVENT':\n              let id = data[1]\n              let event = data[2]\n              if (\n                validateEvent(event) &&\n                openSubs[id] &&\n                (openSubs[id].skipVerification || verifySignature(event)) &&\n                matchFilters(openSubs[id].filters, event)\n              ) {\n                openSubs[id]\n                ;(subListeners[id]?.event || []).forEach(cb => cb(event))\n              }\n              return\n            case 'EOSE': {\n              let id = data[1]\n              ;(subListeners[id]?.eose || []).forEach(cb => cb())\n              return\n            }\n            case 'OK': {\n              let id: string = data[1]\n              let ok: boolean = data[2]\n              let reason: string = data[3] || ''\n              if (ok) pubListeners[id]?.ok.forEach(cb => cb())\n              else pubListeners[id]?.failed.forEach(cb => cb(reason))\n              return\n            }\n            case 'NOTICE':\n              let notice = data[1]\n              listeners.notice.forEach(cb => cb(notice))\n              return\n          }\n        } catch (err) {\n          return\n        }\n      }\n    })\n  }\n\n  async function connect(): Promise<void> {\n    if (ws?.readyState && ws.readyState === 1) return // ws already open\n    await connectRelay()\n  }\n\n  async function trySend(params: [string, ...any]) {\n    let msg = JSON.stringify(params)\n\n    await untilOpen\n    try {\n      ws.send(msg)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const sub = (\n    filters: Filter[],\n    {\n      skipVerification = false,\n      id = Math.random().toString().slice(2)\n    }: SubscriptionOptions = {}\n  ): Sub => {\n    let subid = id\n\n    openSubs[subid] = {\n      id: subid,\n      filters,\n      skipVerification\n    }\n    trySend(['REQ', subid, ...filters])\n\n    return {\n      sub: (newFilters, newOpts = {}) =>\n        sub(newFilters || filters, {\n          skipVerification: newOpts.skipVerification || skipVerification,\n          id: subid\n        }),\n      unsub: () => {\n        delete openSubs[subid]\n        delete subListeners[subid]\n        trySend(['CLOSE', subid])\n      },\n      on: (type: 'event' | 'eose', cb: any): void => {\n        subListeners[subid] = subListeners[subid] || {\n          event: [],\n          eose: []\n        }\n        subListeners[subid][type].push(cb)\n      },\n      off: (type: 'event' | 'eose', cb: any): void => {\n        let listeners = subListeners[subid]\n        let idx = listeners[type].indexOf(cb)\n        if (idx >= 0) listeners[type].splice(idx, 1)\n      }\n    }\n  }\n\n  return {\n    url,\n    sub,\n    on: (type: RelayEvent, cb: any): void => {\n      listeners[type].push(cb)\n      if (type === 'connect' && ws?.readyState === 1) {\n        cb()\n      }\n    },\n    off: (type: RelayEvent, cb: any): void => {\n      let index = listeners[type].indexOf(cb)\n      if (index !== -1) listeners[type].splice(index, 1)\n    },\n    publish(event: Event): Pub {\n      if (!event.id) throw new Error(`event ${event} has no id`)\n      let id = event.id\n\n      var sent = false\n      var mustMonitor = false\n\n      trySend(['EVENT', event])\n        .then(() => {\n          sent = true\n          if (mustMonitor) {\n            startMonitoring()\n            mustMonitor = false\n          }\n        })\n        .catch(() => {})\n\n      const startMonitoring = () => {\n        let monitor = sub([{ids: [id]}], {\n          id: `monitor-${id.slice(0, 5)}`\n        })\n        let willUnsub = setTimeout(() => {\n          ;(pubListeners[id]?.failed || []).forEach(cb =>\n            cb('event not seen after 5 seconds')\n          )\n          monitor.unsub()\n        }, 5000)\n        monitor.on('event', () => {\n          clearTimeout(willUnsub)\n          ;(pubListeners[id]?.seen || []).forEach(cb => cb())\n        })\n      }\n\n      return {\n        on: (type: 'ok' | 'seen' | 'failed', cb: any) => {\n          pubListeners[id] = pubListeners[id] || {\n            ok: [],\n            seen: [],\n            failed: []\n          }\n          pubListeners[id][type].push(cb)\n\n          if (type === 'seen') {\n            if (sent) startMonitoring()\n            else mustMonitor = true\n          }\n        },\n        off: (type: 'ok' | 'seen' | 'failed', cb: any) => {\n          let listeners = pubListeners[id]\n          if (!listeners) return\n          let idx = listeners[type].indexOf(cb)\n          if (idx >= 0) listeners[type].splice(idx, 1)\n        }\n      }\n    },\n    connect,\n    close(): Promise<void> {\n      ws.close()\n      return new Promise<void>(resolve => {\n        resolveClose = resolve\n      })\n    },\n    get status() {\n      return ws?.readyState ?? 3\n    }\n  }\n}\n", "import * as secp256k1 from '@noble/secp256k1'\nimport {sha256} from '@noble/hashes/sha256'\n\nimport {utf8Encoder} from './utils'\n\n/* eslint-disable no-unused-vars */\nexport enum Kind {\n  Metadata = 0,\n  Text = 1,\n  RecommendRelay = 2,\n  Contacts = 3,\n  EncryptedDirectMessage = 4,\n  EventDeletion = 5,\n  Reaction = 7,\n  ChannelCreation = 40,\n  ChannelMetadata = 41,\n  ChannelMessage = 42,\n  ChannelHideMessage = 43,\n  ChannelMuteUser = 44\n}\n\nexport type Event = {\n  id?: string\n  sig?: string\n  kind: Kind\n  tags: string[][]\n  pubkey: string\n  content: string\n  created_at: number\n}\n\nexport function getBlankEvent(): Event {\n  return {\n    kind: 255,\n    pubkey: '',\n    content: '',\n    tags: [],\n    created_at: 0\n  }\n}\n\nexport function serializeEvent(evt: Event): string {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\")\n\n  return JSON.stringify([\n    0,\n    evt.pubkey,\n    evt.created_at,\n    evt.kind,\n    evt.tags,\n    evt.content\n  ])\n}\n\nexport function getEventHash(event: Event): string {\n  let eventHash = sha256(utf8Encoder.encode(serializeEvent(event)))\n  return secp256k1.utils.bytesToHex(eventHash)\n}\n\nexport function validateEvent(event: Event): boolean {\n  if (typeof event.content !== 'string') return false\n  if (typeof event.created_at !== 'number') return false\n  if (typeof event.pubkey !== 'string') return false\n  if (!event.pubkey.match(/^[a-f0-9]{64}$/)) return false\n\n  if (!Array.isArray(event.tags)) return false\n  for (let i = 0; i < event.tags.length; i++) {\n    let tag = event.tags[i]\n    if (!Array.isArray(tag)) return false\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === 'object') return false\n    }\n  }\n\n  return true\n}\n\nexport function verifySignature(event: Event & {sig: string}): boolean {\n  return secp256k1.schnorr.verifySync(\n    event.sig,\n    getEventHash(event),\n    event.pubkey\n  )\n}\n\nexport function signEvent(event: Event, key: string): string {\n  return secp256k1.utils.bytesToHex(\n    secp256k1.schnorr.signSync(getEventHash(event), key)\n  )\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\nexport const sha256 = wrapConstructor(() => new SHA256());\n", "import { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        const { view, buffer, blockLen, finished } = this;\n        if (finished)\n            throw new Error('digest() was already called');\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        if (!(out instanceof Uint8Array) || out.length < this.outputLen)\n            throw new Error('_Sha2: Invalid output buffer');\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // NOTE: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64bit of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n", "/*! noble-hashes - MIT License (c) 2021 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianess.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    // pre-caching chars could speed this up 6x.\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    if (hexByte.length !== 2)\n        throw new Error('Invalid byte sequence');\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Buffer.from(hex, 'hex') -> hexToBytes(hex)\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n// Currently avoid insertion of polyfills with packers (browserify/webpack/etc)\n// But setTimeout is pretty slow, maybe worth to investigate howto do minimal polyfill here\nexport const nextTick = (() => {\n    const nodeRequire = typeof module !== 'undefined' &&\n        typeof module.require === 'function' &&\n        module.require.bind(module);\n    try {\n        if (nodeRequire) {\n            const { setImmediate } = nodeRequire('timers');\n            return () => new Promise((resolve) => setImmediate(resolve));\n        }\n    }\n    catch (e) { }\n    return () => new Promise((resolve) => setTimeout(resolve, 0));\n})();\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n// Buffer.concat([buf1, buf2]) -> concatBytes(buf1, buf2)\nexport function concatBytes(...arrays) {\n    if (arrays.length === 1) {\n        return arrays[0];\n    }\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function assertBool(b) {\n    if (typeof b !== 'boolean') {\n        throw new Error(`Expected boolean, not ${b}`);\n    }\n}\nexport function assertBytes(bytes, ...lengths) {\n    if (bytes instanceof Uint8Array && (!lengths.length || lengths.includes(bytes.length))) {\n        return;\n    }\n    throw new TypeError(`Expected ${lengths} bytes, not ${typeof bytes} with length=${bytes.length}`);\n}\nexport function assertHash(hash) {\n    if (typeof hash !== 'function' || typeof hash.init !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    assertNumber(hash.outputLen);\n    assertNumber(hash.blockLen);\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(def, _opts) {\n    if (_opts !== undefined && (typeof _opts !== 'object' || !isPlainObject(_opts)))\n        throw new TypeError('Options should be object or undefined');\n    const opts = Object.assign(def, _opts);\n    return opts;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    hashC.init = hashC.create;\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    hashC.init = hashC.create;\n    return hashC;\n}\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n", "export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "import {Event} from './event'\n\nexport const utf8Decoder = new TextDecoder('utf-8')\nexport const utf8Encoder = new TextEncoder()\n\n//\n// fast insert-into-sorted-array functions adapted from https://github.com/terrymorse58/fast-sorted-array\n//\nexport function insertEventIntoDescendingList(\n  sortedArray: Event[],\n  event: Event\n) {\n  let start = 0\n  let end = sortedArray.length - 1\n  let midPoint\n  let position = start\n\n  if (end < 0) {\n    position = 0\n  } else if (event.created_at < sortedArray[end].created_at) {\n    position = end + 1\n  } else if (event.created_at >= sortedArray[start].created_at) {\n    position = start\n  } else\n    while (true) {\n      if (end <= start + 1) {\n        position = end\n        break\n      }\n      midPoint = Math.floor(start + (end - start) / 2)\n      if (sortedArray[midPoint].created_at > event.created_at) {\n        start = midPoint\n      } else if (sortedArray[midPoint].created_at < event.created_at) {\n        end = midPoint\n      } else {\n        // aMidPoint === num\n        position = midPoint\n        break\n      }\n    }\n\n  // insert when num is NOT already in (no duplicates)\n  if (sortedArray[position]?.id !== event.id) {\n    return [\n      ...sortedArray.slice(0, position),\n      event,\n      ...sortedArray.slice(position)\n    ]\n  }\n\n  return sortedArray\n}\n\nexport function insertEventIntoAscendingList(\n  sortedArray: Event[],\n  event: Event\n) {\n  let start = 0\n  let end = sortedArray.length - 1\n  let midPoint\n  let position = start\n\n  if (end < 0) {\n    position = 0\n  } else if (event.created_at > sortedArray[end].created_at) {\n    position = end + 1\n  } else if (event.created_at <= sortedArray[start].created_at) {\n    position = start\n  } else\n    while (true) {\n      if (end <= start + 1) {\n        position = end\n        break\n      }\n      midPoint = Math.floor(start + (end - start) / 2)\n      if (sortedArray[midPoint].created_at < event.created_at) {\n        start = midPoint\n      } else if (sortedArray[midPoint].created_at > event.created_at) {\n        end = midPoint\n      } else {\n        // aMidPoint === num\n        position = midPoint\n        break\n      }\n    }\n\n  // insert when num is NOT already in (no duplicates)\n  if (sortedArray[position]?.id !== event.id) {\n    return [\n      ...sortedArray.slice(0, position),\n      event,\n      ...sortedArray.slice(position)\n    ]\n  }\n\n  return sortedArray\n}\n", "import {Event} from './event'\n\nexport type Filter = {\n  ids?: string[]\n  kinds?: number[]\n  authors?: string[]\n  since?: number\n  until?: number\n  limit?: number\n  [key: `#${string}`]: string[]\n}\n\nexport function matchFilter(\n  filter: Filter,\n  event: Event & {id: string}\n): boolean {\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) return false\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1) return false\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1)\n    return false\n\n  for (let f in filter) {\n    if (f[0] === '#') {\n      let tagName = f.slice(1)\n      let values = filter[`#${tagName}`]\n      if (\n        values &&\n        !event.tags.find(\n          ([t, v]) => t === f.slice(1) && values.indexOf(v) !== -1\n        )\n      )\n        return false\n    }\n  }\n\n  if (filter.since && event.created_at < filter.since) return false\n  if (filter.until && event.created_at >= filter.until) return false\n\n  return true\n}\n\nexport function matchFilters(\n  filters: Filter[],\n  event: Event & {id: string}\n): boolean {\n  for (let i = 0; i < filters.length; i++) {\n    if (matchFilter(filters[i], event)) return true\n  }\n  return false\n}\n", "export function getHex64(json: string, field: string): string {\n  let len = field.length + 3\n  let idx = json.indexOf(`\"${field}\":`) + len\n  let s = json.slice(idx).indexOf(`\"`) + idx + 1\n  return json.slice(s, s + 64)\n}\n\nexport function getInt(json: string, field: string): number {\n  let len = field.length\n  let idx = json.indexOf(`\"${field}\":`) + len + 3\n  let sliced = json.slice(idx)\n  let end = Math.min(sliced.indexOf(','), sliced.indexOf('}'))\n  return parseInt(sliced.slice(0, end), 10)\n}\n\nexport function matchEventId(json: string, id: string): boolean {\n  return id === getHex64(json, 'id')\n}\n\nexport function matchEventPubkey(json: string, pubkey: string): boolean {\n  return pubkey === getHex64(json, 'pubkey')\n}\n\nexport function matchEventKind(json: string, kind: number): boolean {\n  return kind === getInt(json, 'kind')\n}\n", "import {randomBytes} from '@noble/hashes/utils'\nimport * as secp256k1 from '@noble/secp256k1'\nimport {base64} from '@scure/base'\n\nimport {utf8Decoder, utf8Encoder} from './utils'\n\nexport async function encrypt(\n  privkey: string,\n  pubkey: string,\n  text: string\n): Promise<string> {\n  const key = secp256k1.getSharedSecret(privkey, '02' + pubkey)\n  const normalizedKey = getNormalizedX(key)\n\n  let iv = Uint8Array.from(randomBytes(16))\n  let plaintext = utf8Encoder.encode(text)\n  let cryptoKey = await crypto.subtle.importKey(\n    'raw',\n    normalizedKey,\n    {name: 'AES-CBC'},\n    false,\n    ['encrypt']\n  )\n  let ciphertext = await crypto.subtle.encrypt(\n    {name: 'AES-CBC', iv},\n    cryptoKey,\n    plaintext\n  )\n  let ctb64 = base64.encode(new Uint8Array(ciphertext))\n  let ivb64 = base64.encode(new Uint8Array(iv.buffer))\n\n  return `${ctb64}?iv=${ivb64}`\n}\n\nexport async function decrypt(\n  privkey: string,\n  pubkey: string,\n  data: string\n): Promise<string> {\n  let [ctb64, ivb64] = data.split('?iv=')\n  let key = secp256k1.getSharedSecret(privkey, '02' + pubkey)\n  let normalizedKey = getNormalizedX(key)\n\n  let cryptoKey = await crypto.subtle.importKey(\n    'raw',\n    normalizedKey,\n    {name: 'AES-CBC'},\n    false,\n    ['decrypt']\n  )\n  let ciphertext = base64.decode(ctb64)\n  let iv = base64.decode(ivb64)\n\n  let plaintext = await crypto.subtle.decrypt(\n    {name: 'AES-CBC', iv},\n    cryptoKey,\n    ciphertext\n  )\n\n  let text = utf8Decoder.decode(plaintext)\n  return text\n}\n\nfunction getNormalizedX(key: Uint8Array): Uint8Array {\n  return key.slice(1, 33)\n}\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n", "import {ProfilePointer} from './nip19'\n\nvar _fetch: any\n\ntry {\n  _fetch = fetch\n} catch {}\n\nexport function useFetchImplementation(fetchImplementation: any) {\n  _fetch = fetchImplementation\n}\n\nexport async function searchDomain(\n  domain: string,\n  query = ''\n): Promise<{[name: string]: string}> {\n  try {\n    let res = await (\n      await _fetch(`https://${domain}/.well-known/nostr.json?name=${query}`)\n    ).json()\n\n    return res.names\n  } catch (_) {\n    return {}\n  }\n}\n\nexport async function queryProfile(\n  fullname: string\n): Promise<ProfilePointer | null> {\n  let [name, domain] = fullname.split('@')\n\n  if (!domain) {\n    // if there is no @, it is because it is just a domain, so assume the name is \"_\"\n    domain = name\n    name = '_'\n  }\n\n  if (!name.match(/^[a-z0-9-_]+$/)) return null\n\n  let res = await (\n    await _fetch(`https://${domain}/.well-known/nostr.json?name=${name}`)\n  ).json()\n\n  if (!res?.names?.[name]) return null\n\n  let pubkey = res.names[name] as string\n  let relays = (res.relays?.[pubkey] || []) as string[] // nip35\n\n  return {\n    pubkey,\n    relays\n  }\n}\n", "import * as secp256k1 from '@noble/secp256k1'\nimport {wordlist} from '@scure/bip39/wordlists/english.js'\nimport {\n  generateMnemonic,\n  mnemonicToSeedSync,\n  validateMnemonic\n} from '@scure/bip39'\nimport {HDKey} from '@scure/bip32'\n\nexport function privateKeyFromSeedWords(mnemonic: string, passphrase?: string): string {\n  let root = HDKey.fromMasterSeed(mnemonicToSeedSync(mnemonic, passphrase))\n  let privateKey = root.derive(`m/44'/1237'/0'/0/0`).privateKey\n  if (!privateKey) throw new Error('could not derive private key')\n  return secp256k1.utils.bytesToHex(privateKey)\n}\n\nexport function generateSeedWords(): string {\n  return generateMnemonic(wordlist)\n}\n\nexport function validateWords(words: string): boolean {\n  return validateMnemonic(words, wordlist)\n}\n", "import { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport * as secp from '@noble/secp256k1';\nimport { base58check as base58checker } from '@scure/base';\nsecp.utils.hmacSha256Sync = (key, ...msgs) => hmac(sha256, key, secp.utils.concatBytes(...msgs));\nconst base58check = base58checker(sha256);\nfunction bytesToNumber(bytes) {\n    return BigInt(`0x${bytesToHex(bytes)}`);\n}\nfunction numberToBytes(num) {\n    return hexToBytes(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\nconst BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET = 0x80000000;\nconst hash160 = (data) => ripemd160(sha256(data));\nconst fromU32 = (data) => createView(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n    }\n    const buf = new Uint8Array(4);\n    createView(buf).setUint32(0, n, false);\n    return buf;\n};\nexport class HDKey {\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.chainCode = null;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object') {\n            throw new Error('HDKey.constructor must not be called directly');\n        }\n        this.versions = opt.versions || BITCOIN_VERSIONS;\n        this.depth = opt.depth || 0;\n        this.chainCode = opt.chainCode;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index) {\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n            }\n        }\n        if (opt.publicKey && opt.privateKey) {\n            throw new Error('HDKey: publicKey and privateKey at same time.');\n        }\n        if (opt.privateKey) {\n            if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n                throw new Error('Invalid private key');\n            }\n            this.privKey =\n                typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n            this.privKeyBytes = numberToBytes(this.privKey);\n            this.pubKey = secp.getPublicKey(opt.privateKey, true);\n        }\n        else if (opt.publicKey) {\n            this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n        }\n        else {\n            throw new Error('HDKey: no public or private key provided');\n        }\n        this.pubHash = hash160(this.pubKey);\n    }\n    get fingerprint() {\n        if (!this.pubHash) {\n            throw new Error('No publicKey set!');\n        }\n        return fromU32(this.pubHash);\n    }\n    get identifier() {\n        return this.pubHash;\n    }\n    get pubKeyHash() {\n        return this.pubHash;\n    }\n    get privateKey() {\n        return this.privKeyBytes || null;\n    }\n    get publicKey() {\n        return this.pubKey || null;\n    }\n    get privateExtendedKey() {\n        const priv = this.privateKey;\n        if (!priv) {\n            throw new Error('No private key');\n        }\n        return base58check.encode(this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv)));\n    }\n    get publicExtendedKey() {\n        if (!this.pubKey) {\n            throw new Error('No public key');\n        }\n        return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n    }\n    static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n        assertBytes(seed);\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n        }\n        const I = hmac(sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            versions,\n            chainCode: I.slice(32),\n            privateKey: I.slice(0, 32),\n        });\n    }\n    static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n        const keyBuffer = base58check.decode(base58key);\n        const keyView = createView(keyBuffer);\n        const version = keyView.getUint32(0, false);\n        const opt = {\n            versions,\n            depth: keyBuffer[4],\n            parentFingerprint: keyView.getUint32(5, false),\n            index: keyView.getUint32(9, false),\n            chainCode: keyBuffer.slice(13, 45),\n        };\n        const key = keyBuffer.slice(45);\n        const isPriv = key[0] === 0;\n        if (version !== versions[isPriv ? 'private' : 'public']) {\n            throw new Error('Version mismatch');\n        }\n        if (isPriv) {\n            return new HDKey({ ...opt, privateKey: key.slice(1) });\n        }\n        else {\n            return new HDKey({ ...opt, publicKey: key });\n        }\n    }\n    static fromJSON(json) {\n        return HDKey.fromExtendedKey(json.xpriv);\n    }\n    derive(path) {\n        if (!/^[mM]'?/.test(path)) {\n            throw new Error('Path must start with \"m\" or \"M\"');\n        }\n        if (/^[mM]'?$/.test(path)) {\n            return this;\n        }\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            if (!m || m.length !== 3) {\n                throw new Error(`Invalid child index: ${c}`);\n            }\n            let idx = +m[1];\n            if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n                throw new Error('Invalid index');\n            }\n            if (m[2] === \"'\") {\n                idx += HARDENED_OFFSET;\n            }\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (!this.pubKey || !this.chainCode) {\n            throw new Error('No publicKey or chainCode set');\n        }\n        let data = toU32(index);\n        if (index >= HARDENED_OFFSET) {\n            const priv = this.privateKey;\n            if (!priv) {\n                throw new Error('Could not derive hardened child key');\n            }\n            data = concatBytes(new Uint8Array([0]), priv, data);\n        }\n        else {\n            data = concatBytes(this.pubKey, data);\n        }\n        const I = hmac(sha512, this.chainCode, data);\n        const childTweak = bytesToNumber(I.slice(0, 32));\n        const chainCode = I.slice(32);\n        if (!secp.utils.isValidPrivateKey(childTweak)) {\n            throw new Error('Tweak bigger than curve order');\n        }\n        const opt = {\n            versions: this.versions,\n            chainCode,\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n        };\n        try {\n            if (this.privateKey) {\n                const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n                if (!secp.utils.isValidPrivateKey(added)) {\n                    throw new Error('The tweak was out of range or the resulted private key is invalid');\n                }\n                opt.privateKey = added;\n            }\n            else {\n                const added = secp.Point.fromHex(this.pubKey).add(secp.Point.fromPrivateKey(childTweak));\n                if (added.equals(secp.Point.ZERO)) {\n                    throw new Error('The tweak was equal to negative P, which made the result key invalid');\n                }\n                opt.publicKey = added.toRawBytes(true);\n            }\n            return new HDKey(opt);\n        }\n        catch (err) {\n            return this.deriveChild(index + 1);\n        }\n    }\n    sign(hash) {\n        if (!this.privateKey) {\n            throw new Error('No privateKey set!');\n        }\n        assertBytes(hash, 32);\n        return secp.signSync(hash, this.privKey, {\n            canonical: true,\n            der: false,\n        });\n    }\n    verify(hash, signature) {\n        assertBytes(hash, 32);\n        assertBytes(signature, 64);\n        if (!this.publicKey) {\n            throw new Error('No publicKey set!');\n        }\n        let sig;\n        try {\n            sig = secp.Signature.fromCompact(signature);\n        }\n        catch (error) {\n            return false;\n        }\n        return secp.verify(sig, hash, this.publicKey);\n    }\n    wipePrivateData() {\n        this.privKey = undefined;\n        if (this.privKeyBytes) {\n            this.privKeyBytes.fill(0);\n            this.privKeyBytes = undefined;\n        }\n        return this;\n    }\n    toJSON() {\n        return {\n            xpriv: this.privateExtendedKey,\n            xpub: this.publicExtendedKey,\n        };\n    }\n    serialize(version, key) {\n        if (!this.chainCode) {\n            throw new Error('No chainCode set');\n        }\n        assertBytes(key, 33);\n        return concatBytes(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n    }\n}\n", "import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n", "export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n", "export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n", "import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n", "import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n", "const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "import * as secp256k1 from '@noble/secp256k1'\nimport {bech32} from '@scure/base'\n\nimport {utf8Decoder, utf8Encoder} from './utils'\n\nconst Bech32MaxSize = 5000\n\nexport type ProfilePointer = {\n  pubkey: string // hex\n  relays?: string[]\n}\n\nexport type EventPointer = {\n  id: string // hex\n  relays?: string[]\n}\n\nexport function decode(nip19: string): {\n  type: string\n  data: ProfilePointer | EventPointer | string\n} {\n  let {prefix, words} = bech32.decode(nip19, Bech32MaxSize)\n  let data = new Uint8Array(bech32.fromWords(words))\n\n  if (prefix === 'nprofile') {\n    let tlv = parseTLV(data)\n    if (!tlv[0]?.[0]) throw new Error('missing TLV 0 for nprofile')\n    if (tlv[0][0].length !== 32) throw new Error('TLV 0 should be 32 bytes')\n\n    return {\n      type: 'nprofile',\n      data: {\n        pubkey: secp256k1.utils.bytesToHex(tlv[0][0]),\n        relays: tlv[1].map(d => utf8Decoder.decode(d))\n      }\n    }\n  }\n\n  if (prefix === 'nevent') {\n    let tlv = parseTLV(data)\n    if (!tlv[0]?.[0]) throw new Error('missing TLV 0 for nevent')\n    if (tlv[0][0].length !== 32) throw new Error('TLV 0 should be 32 bytes')\n\n    return {\n      type: 'nevent',\n      data: {\n        id: secp256k1.utils.bytesToHex(tlv[0][0]),\n        relays: tlv[1].map(d => utf8Decoder.decode(d))\n      }\n    }\n  }\n\n  if (prefix === 'nsec' || prefix === 'npub' || prefix === 'note') {\n    return {type: prefix, data: secp256k1.utils.bytesToHex(data)}\n  }\n\n  throw new Error(`unknown prefix ${prefix}`)\n}\n\ntype TLV = {[t: number]: Uint8Array[]}\n\nfunction parseTLV(data: Uint8Array): TLV {\n  let result: TLV = {}\n  let rest = data\n  while (rest.length > 0) {\n    let t = rest[0]\n    let l = rest[1]\n    let v = rest.slice(2, 2 + l)\n    rest = rest.slice(2 + l)\n    if (v.length < l) continue\n    result[t] = result[t] || []\n    result[t].push(v)\n  }\n  return result\n}\n\nexport function nsecEncode(hex: string): string {\n  return encodeBytes('nsec', hex)\n}\n\nexport function npubEncode(hex: string): string {\n  return encodeBytes('npub', hex)\n}\n\nexport function noteEncode(hex: string): string {\n  return encodeBytes('note', hex)\n}\n\nfunction encodeBytes(prefix: string, hex: string): string {\n  let data = secp256k1.utils.hexToBytes(hex)\n  let words = bech32.toWords(data)\n  return bech32.encode(prefix, words, Bech32MaxSize)\n}\n\nexport function nprofileEncode(profile: ProfilePointer): string {\n  let data = encodeTLV({\n    0: [secp256k1.utils.hexToBytes(profile.pubkey)],\n    1: (profile.relays || []).map(url => utf8Encoder.encode(url))\n  })\n  let words = bech32.toWords(data)\n  return bech32.encode('nprofile', words, Bech32MaxSize)\n}\n\nexport function neventEncode(event: EventPointer): string {\n  let data = encodeTLV({\n    0: [secp256k1.utils.hexToBytes(event.id)],\n    1: (event.relays || []).map(url => utf8Encoder.encode(url))\n  })\n  let words = bech32.toWords(data)\n  return bech32.encode('nevent', words, Bech32MaxSize)\n}\n\nfunction encodeTLV(tlv: TLV): Uint8Array {\n  let entries: Uint8Array[] = []\n\n  Object.entries(tlv).forEach(([t, vs]) => {\n    vs.forEach(v => {\n      let entry = new Uint8Array(v.length + 2)\n      entry.set([parseInt(t)], 0)\n      entry.set([v.length], 1)\n      entry.set(v, 2)\n      entries.push(entry)\n    })\n  })\n\n  return secp256k1.utils.concatBytes(...entries)\n}\n", "import * as secp256k1 from '@noble/secp256k1'\nimport {sha256} from '@noble/hashes/sha256'\n\nimport {Event} from './event'\nimport {utf8Encoder} from './utils'\nimport {getPublicKey} from './keys'\n\nexport type Parameters = {\n  pubkey: string // the key to whom the delegation will be given\n  kind: number | undefined\n  until: number | undefined // delegation will only be valid until this date\n  since: number | undefined // delegation will be valid from this date on\n}\n\nexport type Delegation = {\n  from: string // the pubkey who signed the delegation\n  to: string // the pubkey that is allowed to use the delegation\n  cond: string // the string of conditions as they should be included in the event tag\n  sig: string\n}\n\nexport function createDelegation(\n  privateKey: string,\n  parameters: Parameters\n): Delegation {\n  let conditions = []\n  if ((parameters.kind || -1) >= 0) conditions.push(`kind=${parameters.kind}`)\n  if (parameters.until) conditions.push(`created_at<${parameters.until}`)\n  if (parameters.since) conditions.push(`created_at>${parameters.since}`)\n  let cond = conditions.join('&')\n\n  if (cond === '')\n    throw new Error('refusing to create a delegation without any conditions')\n\n  let sighash = sha256(\n    utf8Encoder.encode(`nostr:delegation:${parameters.pubkey}:${cond}`)\n  )\n\n  let sig = secp256k1.utils.bytesToHex(\n    secp256k1.schnorr.signSync(sighash, privateKey)\n  )\n\n  return {\n    from: getPublicKey(privateKey),\n    to: parameters.pubkey,\n    cond,\n    sig\n  }\n}\n\nexport function getDelegator(event: Event): string | null {\n  // find delegation tag\n  let tag = event.tags.find(tag => tag[0] === 'delegation' && tag.length >= 4)\n  if (!tag) return null\n\n  let pubkey = tag[1]\n  let cond = tag[2]\n  let sig = tag[3]\n\n  // check conditions\n  let conditions = cond.split('&')\n  for (let i = 0; i < conditions.length; i++) {\n    let [key, operator, value] = conditions[i].split(/\\b/)\n\n    // the supported conditions are just 'kind' and 'created_at' for now\n    if (key === 'kind' && operator === '=' && event.kind === parseInt(value))\n      continue\n    else if (\n      key === 'created_at' &&\n      operator === '<' &&\n      event.created_at < parseInt(value)\n    )\n      continue\n    else if (\n      key === 'created_at' &&\n      operator === '>' &&\n      event.created_at > parseInt(value)\n    )\n      continue\n    else return null // invalid condition\n  }\n\n  // check signature\n  let sighash = sha256(\n    utf8Encoder.encode(`nostr:delegation:${event.pubkey}:${cond}`)\n  )\n  if (!secp256k1.schnorr.verifySync(sig, sighash, pubkey)) return null\n\n  return pubkey\n}\n", "import { assertHash, Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        if (this.destroyed)\n            throw new Error('instance is destroyed');\n        if (!(out instanceof Uint8Array) || out.length !== this.outputLen)\n            throw new Error('HMAC: Invalid output buffer');\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\nhmac.init = hmac.create;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,aAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,cAAQ,WAAW;AACnB,cAAQ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA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",
  "names": ["number", "bool", "bytes", "hash", "exists", "output", "assert", "createView", "rotr", "hexes", "bytesToHex", "hex", "hexToBytes", "nextTick", "utf8ToBytes", "toBytes", "concatBytes", "Hash", "wrapConstructor", "randomBytes", "HMAC", "hash", "hmac", "hash", "i", "setBigUint64", "isLE", "_32n", "SHA2", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA224", "U32_MASK64", "_32n", "fromBig", "split", "toBig", "shrSH", "shrSL", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "rotr32H", "rotr32L", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "add", "add3L", "add3H", "add4L", "add4H", "add5L", "add5H", "u64", "SHA512_Kh", "SHA512_Kl", "SHA512_W_H", "SHA512_W_L", "SHA512", "SHA512_224", "SHA512_256", "SHA384", "assertNumber", "chain", "decode", "alphabet", "join", "padding", "normalize", "convertRadix", "gcd", "radix2carry", "convertRadix2", "radix", "bytes", "radix2", "unsafeWrapper", "checksum", "genBase58", "XMR_BLOCK_LEN", "base58check", "sha256", "BECH_ALPHABET", "POLYMOD_GENERATORS", "bech32Polymod", "bechChecksum", "genBech32", "_words", "CODERS", "coderTypeError", "wordlist", "normalize", "generateMnemonic", "validateMnemonic", "mnemonicToSeedSync", "getPublicKey", "d", "f", "bytes", "hex", "number", "gcd", "hash", "hashLen", "bytes", "hex", "bytes", "crypto", "hash", "randomBytes", "getPublicKey", "crypto", "hexes", "hash", "crypto", "isLE", "_32n", "Kind", "f", "id", "listeners", "assertNumber", "decode", "alphabet", "padding", "bytes", "checksum", "sha256", "decode", "_words", "hash", "crypto", "createView", "rotr", "isLE", "hexes", "bytesToHex", "hex", "hexToBytes", "utf8ToBytes", "toBytes", "concatBytes", "Hash", "wrapConstructor", "toBytes", "Hash", "hash", "toBytes", "setBigUint64", "isLE", "_32n", "SHA2", "Hash", "createView", "toBytes", "SHA2", "wrapConstructor", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA2", "rotr", "sha256", "wrapConstructor", "SHA2", "wrapConstructor", "sha256", "base58check", "bytesToNumber", "bytes", "bytesToHex", "hexToBytes", "utf8ToBytes", "createView", "concatBytes", "hash", "hex", "getPublicKey", "tag", "HMAC", "hash", "hmac", "hmac"]
}
