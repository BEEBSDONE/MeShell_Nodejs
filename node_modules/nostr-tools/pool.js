"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.SimplePool = void 0;
var relay_1 = require("./relay");
var utils_1 = require("./utils");
var SimplePool = /** @class */ (function () {
    function SimplePool() {
        this._seenOn = {}; // a map of all events we've seen in each relay
        this._conn = {};
    }
    SimplePool.prototype.close = function (relays) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(relays.map(function (url) { return __awaiter(_this, void 0, void 0, function () {
                            var relay;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        relay = this._conn[(0, utils_1.normalizeURL)(url)];
                                        if (!relay) return [3 /*break*/, 2];
                                        return [4 /*yield*/, relay.close()];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SimplePool.prototype.ensureRelay = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var nm, existing, relay;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nm = (0, utils_1.normalizeURL)(url);
                        existing = this._conn[nm];
                        if (existing)
                            return [2 /*return*/, existing];
                        relay = (0, relay_1.relayInit)(nm);
                        this._conn[nm] = relay;
                        return [4 /*yield*/, relay.connect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, relay];
                }
            });
        });
    };
    SimplePool.prototype.sub = function (relays, filters, opts) {
        var _this = this;
        var _knownIds = new Set();
        var modifiedOpts = opts || {};
        modifiedOpts.alreadyHaveEvent = function (id, url) {
            var set = _this._seenOn[id] || new Set();
            set.add(url);
            _this._seenOn[id] = set;
            return _knownIds.has(id);
        };
        var subs = [];
        var eventListeners = new Set();
        var eoseListeners = new Set();
        var eosesMissing = relays.length;
        var eoseSent = false;
        var eoseTimeout = setTimeout(function () {
            eoseSent = true;
            for (var _i = 0, _a = eoseListeners.values(); _i < _a.length; _i++) {
                var cb = _a[_i];
                cb();
            }
        }, 2400);
        relays.forEach(function (relay) { return __awaiter(_this, void 0, void 0, function () {
            var r, s;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ensureRelay(relay)];
                    case 1:
                        r = _a.sent();
                        if (!r)
                            return [2 /*return*/];
                        s = r.sub(filters, modifiedOpts);
                        s.on('event', function (event) {
                            _knownIds.add(event.id);
                            for (var _i = 0, _a = eventListeners.values(); _i < _a.length; _i++) {
                                var cb = _a[_i];
                                cb(event);
                            }
                        });
                        s.on('eose', function () {
                            if (eoseSent)
                                return;
                            eosesMissing--;
                            if (eosesMissing === 0) {
                                clearTimeout(eoseTimeout);
                                for (var _i = 0, _a = eoseListeners.values(); _i < _a.length; _i++) {
                                    var cb = _a[_i];
                                    cb();
                                }
                            }
                        });
                        subs.push(s);
                        return [2 /*return*/];
                }
            });
        }); });
        var greaterSub = {
            sub: function (filters, opts) {
                subs.forEach(function (sub) { return sub.sub(filters, opts); });
                return greaterSub;
            },
            unsub: function () {
                subs.forEach(function (sub) { return sub.unsub(); });
            },
            on: function (type, cb) {
                switch (type) {
                    case 'event':
                        eventListeners.add(cb);
                        break;
                    case 'eose':
                        eoseListeners.add(cb);
                        break;
                }
            },
            off: function (type, cb) {
                if (type === 'event') {
                    eventListeners["delete"](cb);
                }
                else if (type === 'eose')
                    eoseListeners["delete"](cb);
            }
        };
        return greaterSub;
    };
    SimplePool.prototype.get = function (relays, filter, opts) {
        var _this = this;
        return new Promise(function (resolve) {
            var sub = _this.sub(relays, [filter], opts);
            var timeout = setTimeout(function () {
                sub.unsub();
                resolve(null);
            }, 1500);
            sub.on('event', function (event) {
                resolve(event);
                clearTimeout(timeout);
                sub.unsub();
            });
        });
    };
    SimplePool.prototype.list = function (relays, filters, opts) {
        var _this = this;
        return new Promise(function (resolve) {
            var events = [];
            var sub = _this.sub(relays, filters, opts);
            sub.on('event', function (event) {
                events.push(event);
            });
            // we can rely on an eose being emitted here because pool.sub() will fake one
            sub.on('eose', function () {
                sub.unsub();
                resolve(events);
            });
        });
    };
    SimplePool.prototype.publish = function (relays, event) {
        var _this = this;
        return relays.map(function (relay) {
            var r = _this._conn[(0, utils_1.normalizeURL)(relay)];
            if (!r)
                return badPub(relay);
            var s = r.publish(event);
            return s;
        });
    };
    SimplePool.prototype.seenOn = function (id) {
        var _a, _b;
        return Array.from(((_b = (_a = this._seenOn[id]) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.call(_a)) || []);
    };
    return SimplePool;
}());
exports.SimplePool = SimplePool;
function badPub(relay) {
    return {
        on: function (typ, cb) {
            if (typ === 'failed')
                cb("relay ".concat(relay, " not connected"));
        },
        off: function () { }
    };
}
